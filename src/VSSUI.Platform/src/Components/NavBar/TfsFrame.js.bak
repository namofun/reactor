"use strict";
define("Tfs/Frame", [
    "require",
    "exports",
    "react",
    "VSS/Core/Observable",
    "VSS/Platform/Layout",
    "VSSUI/Expandable",
    "VSSUI/Icon",
    "VSSUI/Menu",
    "VSSUI/Utilities/ScreenSize",
    "VSS/Features/PlatformUI/ContributedItemUtil",
    "VSS/Features/PlatformUI/ContributedMenu",
    "VSSUI/ProgressBar",
    "VSSUI/FocusZone",
    "VSS/Platform/Context",
    "VSS/Platform/Feature",
    "VSSUI/Util",
    "Tfs/Platform/DeviceType",
    "VSS/Platform/Location",
    "VSS/Platform/UserClaims",
    "VSSUI/Observer",
    "VSS/Features/PlatformUI/FPSLink",
    "VSS/Core/Util/Screen",
    "Tfs/Platform/Navigation",
    "Tfs/Platform/ProjectPersona",
    "VSS/Core/Util/String",
    "VSS/Features/PlatformUI/ContributedIcon",
    "VSS/Platform/FPS",
    "VSSUI/Callout",
    "VSSUI/FocusGroup",
    "VSSUI/TooltipEx",
    "VSSUI/Utilities/Focus",
    "VSS/Features/Services/AccountMappingService",
    "VSS/Features/Services/OrganizationsService",
    "VSS/Platform/Util/Url",
    "VSSUI/Link",
    "VSS/Platform/Identity",
    "VSSUI/VssPersona",
    "Tfs/Platform/HeaderActions"
], function(
    RequireFunc,
    Exports,
    React,
    Observable,
    Layout,
    Expandable,
    Icon,
    Menu,
    ScreenSize,
    ContributedItemUtil,
    ContributedMenu,
    ProgressBar,
    FocusZone,
    Context,
    Feature,
    Util,
    DeviceType,
    Location,
    UserClaims,
    Observer,
    FPSLink,
    Screen,
    Navigation,
    ProjectPersona,
    String,
    ContributedIcon,
    FPS,
    Callout,
    FocusGroup,
    TooltipEx,
    Focus,
    AccountMappingService,
    OrganizationsService,
    Url,
    Link,
    Identity,
    VssPersona,
    HeaderActions)
{
    var varResources, moduleHeaderWithHeaderProgressBar, moduleSwitchToDesktopButton, moduleUtilNavigation, moduleSuiteLogo, moduleProjectNavigation, _, varMeControlConstants, nameofComponentsProfileUtilMeControlConstants;
    varResources = Exports.Resources = {},
    Exports.Resources.AccessLevels = "Access levels",
    Exports.Resources.AlternateCredentials = "Alternate credentials",
    Exports.Resources.AzureDevOpsProfile = "Azure DevOps profile",
    Exports.Resources.CollectionSettings = "Collection Settings",
    Exports.Resources.BrandName = "Azure",
    Exports.Resources.ChangeTheme = "Change theme",
    Exports.Resources.Collections = "Collections",
    Exports.Resources.Create = "Create",
    Exports.Resources.Documentation = "Documentation",
    Exports.Resources.GetHelp = "Get help",
    Exports.Resources.Help = "Help",
    Exports.Resources.HelpAndActions = "Help and actions",
    Exports.Resources.ManageUserSettings = "Manage the currently logged in user settings",
    Exports.Resources.Marketplace = "Marketplace",
    Exports.Resources.MoreOrganizations = "{0} more organizations",
    Exports.Resources.MyOrgs = "My organizations",
    Exports.Resources.MyWorkLabel = "My Work",
    Exports.Resources.NavigationMenu = "Expand navigation menu",
    Exports.Resources.NewOrg = "New organization",
    Exports.Resources.Notifications = "Notifications",
    Exports.Resources.OneMoreOrganization = "1 more organization",
    Exports.Resources.OrgSettings = "Organization settings",
    Exports.Resources.PATPage = "Personal access tokens",
    Exports.Resources.PermissionsRefresh = "Permissions",
    Exports.Resources.Preferences = "Time and Locale",
    Exports.Resources.PreviewFeatures = "Preview features",
    Exports.Resources.ProjectSettings = "Project settings",
    Exports.Resources.ProductName = "DevOps",
    Exports.Resources.Profile = "Profile",
    Exports.Resources.RelatedPages = "Related pages",
    Exports.Resources.ShowLess = "Show less information",
    Exports.Resources.ShowMore = "Show more information",
    Exports.Resources.SignIn = "Sign in",
    Exports.Resources.SSHPublicKeys = "SSH public keys",
    Exports.Resources.SuiteLogoLabel = "Azure DevOps organization home page",
    Exports.Resources.SuiteLogoLabelOnPrem = "Azure DevOps collection home page",
    Exports.Resources.TenantPicker = "Switch directory",
    Exports.Resources.Theme = "Theme",
    Exports.Resources.Usage = "Usage",
    Exports.Resources.UserSettings = "User settings",
    Exports.Resources.WhatsNew = "What's new in DevOps",
    function(e) {
        Exports.ComponentsCompositeComposite = {};
        class varComposite extends Layout.VssComponent {
            constructor() {
                super(...arguments),
                this.renderCallout = ((e, t, varAnchorElement) => {
                    const varContributedItems = ContributedItemUtil.getContributedItems(this.context.pageContext, "ms.vss-tfs-web.vertical-header-composite", undefined, "ms.vss-web.menu"),
                    varObservableCollection = new Observable.ObservableCollection;
                    for (const varContributedItem of varContributedItems) {
                        const varMenuItems = ContributedMenu.getMenuItems(this.context.pageContext, varContributedItem.id, undefined);
                        for (const varMenuItem of varMenuItems.value) {
                            "service" !== varMenuItem.groupKey && "getting-started" !== varMenuItem.groupKey || (varMenuItem.groupKey = "help");
                        }
                        const varGroupKey = varMenuItems.value[0] && varMenuItems.value[0].groupKey,
                        varMenuHeader = varComposite.getMenuHeader(varContributedItem, varGroupKey || varContributedItem.id);
                        varMenuHeader && varObservableCollection.push([varMenuHeader]),
                        varObservableCollection.push(varMenuItems)
                    }
                    return React.createElement(
                        Menu.ContextualMenu,
                        {
                            onDismiss: e.collapse,
                            anchorElement: varAnchorElement,
                            anchorOrigin: {
                                horizontal: "end",
                                vertical: "end"
                            },
                            menuProps: {
                                id: "composite-menu",
                                items: varObservableCollection
                            },
                            menuOrigin: {
                                horizontal: "end",
                                vertical: "start"
                            }
                        }
                    )
                })
            }
            static getMenuHeader(e, t) {
                return e.contribution.title
                    ? {
                        id: `header_${e.id}`,
                        itemType: 2,
                        groupKey: t,
                        text: e.contribution.title,
                        rank: varComposite.headerRanks[e.id] || 50
                    }
                    : null
            }
            render() {
                return React.createElement(
                    ScreenSize.ScreenSizeConditional,
                    {
                        condition: screenSize => screenSize <= 0
                    },
                    React.createElement(
                        Expandable.ExpandableContainer,
                        {
                            ariaLabel: varResources.HelpAndActions,
                            className: "commandbar-item commandbar-icon cursor-pointer flex-row flex-noshrink justify-center",
                            renderCallout: this.renderCallout,
                            role: "menuitem"
                        },
                        React.createElement(
                            Icon.Icon,
                            {
                                iconName: "MoreVertical",
                                size: "medium"
                            }
                        )
                    )
                )
            }
        }
        Exports.ComponentsCompositeComposite.Composite = varComposite,
        varComposite.headerRanks = {
            "ms.vss-tfs-web.market-menu": 20,
            "ms.vss-tfs-web.help-menu": 30
        },
        Layout.VssComponent.register("ms.vss-tfs-web.composite", varComposite)
    }(),
    function(e) {
        moduleHeaderWithHeaderProgressBar = Exports.ComponentsHeaderWithHeaderProgressBar = {};
        Exports.ComponentsHeaderWithHeaderProgressBar.WithHeaderProgressBar = class extends Layout.VssComponent {
            constructor(e, t) {
                super(e, t),
                this.clearLoading = (() => {
                    this.setState({
                        loading: undefined
                    })
                }),
                this.startLoading = (() => {
                    this.setState({
                        loading: new Observable.ObservableValue(true)
                    })
                }),
                this.setLoadingComplete = (() => {
                    this.state.loading && (this.state.loading.value = false)
                }),
                this.state = {
                    loading: new Observable.ObservableValue(true)
                }
            }
            render() {
                return React.createElement(
                    React.Fragment,
                    null,
                    this.props.children,
                    undefined !== this.state.loading && React.createElement(
                        ProgressBar.IndeterminateProgressBar,
                        {
                            className: "project-header-progress",
                            loading: this.state.loading,
                            loadingAnimationComplete: this.clearLoading
                        }
                    )
                )
            }
            componentDidMount() {
                super.componentDidMount(),
                document.body.addEventListener("fpsLoading", this.startLoading),
                this.markCompletedAfterTTI()
            }
            componentWillUnmount() {
                super.componentWillUnmount(),
                this.context.pageContext.getService("IVssContributionEventService").unsubscribe(
                    () => { this.setLoadingComplete() },
                    "page-rendered"
                ),
                document.body.removeEventListener("fpsLoading", this.startLoading)
            }
            markCompletedAfterTTI() {
                this.context.pageContext.getService("IVssContributionEventService").subscribe(
                    () => { this.setLoadingComplete() },
                    "page-rendered"
                )
            }
        }
    }(),
    function(e) {
        Exports.ComponentsHeaderProjectHeader = {};
        Layout.Components.add("ms.vss-tfs-web.frame.project-header", class extends React.Component {
            render() {
                return React.createElement(
                    FocusZone.FocusZone,
                    {
                        circularNavigation: true,
                        direction: 1,
                        focusGroupProps: {
                            defaultElementId: "suite-logo"
                        }
                    },
                    React.createElement(
                        "div",
                        {
                            className: "project-header flex-row flex-noshrink",
                            role: "navigation"
                        },
                        React.createElement(
                            moduleHeaderWithHeaderProgressBar.WithHeaderProgressBar,
                            null,
                            React.createElement(
                                Layout.RegionComponent,
                                {
                                    className: "flex-row flex-grow",
                                    componentRegion: "header",
                                    role: "menubar"
                                }
                            )
                        )
                    )
                )
            }
        })
    }(),
    function(e) {
        Exports.ComponentsHeaderTopLevelHeader = {};
        Layout.Components.add("ms.vss-tfs-web.frame.top-level-header", class extends Layout.VssComponent {
            render() {
                return React.createElement(
                    FocusZone.FocusZone,
                    {
                        circularNavigation: true,
                        direction: 1,
                        focusGroupProps: {
                            defaultElementId: "suite-logo"
                        }
                    },
                    React.createElement(
                        "div",
                        {
                            className: "top-level-header flex-row flex-noshrink",
                            role: "navigation"
                        },
                        React.createElement(
                            moduleHeaderWithHeaderProgressBar.WithHeaderProgressBar,
                            null,
                            React.createElement(
                                Layout.RegionComponent,
                                {
                                    className: "flex-row flex-grow",
                                    componentRegion: "header",
                                    role: "menubar"
                                }
                            )
                        )
                    )
                )
            }
        })
    }(),
    function(e) {
        Exports.ComponentsHelpUserSettingsService = {};
        Context.Services.add("IUserSettingsMenu", {
            serviceFactory: class extends Context.VssService {
                expandUserSettingsMenu() {
                    this.expandUserSettings()
                }
                setUserSettingsMenu(e) {
                    this.expandUserSettings = e
                }
                expandHelpMenu() {
                    this.expandHelp()
                }
                setHelpMenu(e) {
                    this.expandHelp = e
                }
            }
        })
    }(),
    function(e) {
        Exports.ComponentsHelpHelp = {};
        class varHelp extends Layout.VssComponent {
            constructor() {
                super(...arguments),
                this.expandableContainerRef = React.createRef(),
                this.service = this.context.pageContext.getService("IUserSettingsMenu"),
                this.renderCallout = ((e, t, varAnchorElement) => React.createElement(
                    Menu.ContextualMenu,
                    {
                        onDismiss: e.collapse,
                        anchorElement: varAnchorElement,
                        anchorOrigin: {
                            horizontal: "end",
                            vertical: "end"
                        },
                        menuProps: {
                            id: "help-menu",
                            items: ContributedMenu.getMenuItems(this.context.pageContext, "ms.vss-tfs-web.help-menu")
                        },
                        menuOrigin: {
                            horizontal: "end",
                            vertical: "start"
                        }
                    }
                ))
            }
            render() {
                return React.createElement(
                    ScreenSize.ScreenSizeConditional,
                    {
                        condition: screenSize => screenSize > 0
                    },
                    React.createElement(
                        Expandable.ExpandableContainer,
                        {
                            ref: this.expandableContainerRef,
                            ariaLabel: varResources.Help,
                            className: "commandbar-item commandbar-icon cursor-pointer flex-row flex-noshrink justify-center",
                            renderCallout: this.renderCallout,
                            role: "menuitem"
                        },
                        React.createElement(
                            Icon.Icon,
                            {
                                iconName: "Unknown",
                                size: "medium",
                                tooltipProps: {
                                    text: varResources.Help
                                }
                            }
                        )
                    )
                )
            }
            componentDidMount() {
                this.expandableContainerRef && this.expandableContainerRef.current &&
                    this.service.setHelpMenu(this.expandableContainerRef.current.expand)
            }
        }
        Exports.ComponentsHelpHelp.Help = varHelp,
        Layout.VssComponent.register("ms.vss-tfs-web.help", varHelp)
    }(),
    function(e) {
        Exports.ComponentsHelpUserSettings = {};
        const varHubRouteContribution = "ms.vss-admin-web.user-admin-hub-route";
        class varUserSettings extends Layout.VssComponent {
            constructor() {
                super(...arguments),
                this.service = this.context.pageContext.getService("IUserSettingsMenu"),
                this.expandableContainerRef = React.createRef(),
                this.renderCallout = ((e, t, varAnchorElement) => React.createElement(Menu.ContextualMenu, {
                    onDismiss: e.collapse,
                    anchorElement: varAnchorElement,
                    anchorOrigin: {
                        horizontal: "end",
                        vertical: "end"
                    },
                    menuProps: {
                        id: "user-settings-menu",
                        items: this.getMenuItems()
                    },
                    menuOrigin: {
                        horizontal: "end",
                        vertical: "start"
                    }
                })),
                this._showPreviewFeatures = (() => {
                    this._initializeTelemetry(),
                    this.telemetryService.publishEvent("UserSettingsMenu", "PreviewFeature", {
                        Action: "Show Preview Features"
                    });
                    this.context.pageContext.getService("IVssContributionService").executeCommandEx("preview-feature", {
                        methodName: "show",
                        serviceName: "IFeaturePanel",
                        dependencies: ["ms.vss-tfs-web.feature-management-content"]
                    })
                }),
                this._showThemePanel = (() => {
                    this._initializeTelemetry(),
                    this.telemetryService.publishEvent("UserSettingsMenu", "ChangeTheme", {
                        Action: "Show Theme Panel"
                    });
                    this.context.pageContext.getService("IVssContributionService").executeCommandEx("change-theme", {
                        methodName: "show",
                        serviceName: "IThemePanelService",
                        dependencies: ["ms.vss-tfs-web.theme-management-content", "ms.vss-tfs-web.available-themes-data-provider"]
                    })
                })
            }
            render() {
                return React.createElement(
                    ScreenSize.ScreenSizeConditional,
                    {
                        condition: screenSize => screenSize > 0
                    },
                    React.createElement(
                        Expandable.ExpandableContainer,
                        {
                            ref: this.expandableContainerRef,
                            ariaLabel: varResources.UserSettings,
                            className: "commandbar-item commandbar-icon cursor-pointer flex-row flex-noshrink justify-center",
                            renderCallout: this.renderCallout,
                            role: "menuitem"
                        },
                        React.createElement(
                            Icon.Icon,
                            {
                                iconName: "PlayerSettings",
                                size: "medium",
                                tooltipProps: {
                                    text: varResources.UserSettings
                                }
                            }
                        )
                    )
                )
            }
            componentDidMount() {
                this.expandableContainerRef && this.expandableContainerRef.current &&
                    this.service.setUserSettingsMenu(this.expandableContainerRef.current.expand)
            }
            getMenuItems() {
                const varVssLocationService = this.context.pageContext.getService("IVssLocationService");
                let varRouteUrl = varVssLocationService.routeUrl(varHubRouteContribution, { adminPivot: "about" });
                const varMenuItems = [];
                return varMenuItems.push({
                    text: varResources.PreviewFeatures,
                    rank: 10,
                    id: "previewFeatureLink",
                    onActivate: this._showPreviewFeatures,
                    iconProps: { iconName: "Preview", className: "admin-tab-icon" }
                }),
                varMenuItems.push({
                    id: "separator",
                    itemType: 1,
                    rank: 20
                }),
                varMenuItems.push({
                    text: varResources.Profile,
                    rank: 30,
                    id: "profilePageLink",
                    href: varRouteUrl,
                    iconProps: { iconName: "ContactInfo", className: "admin-tab-icon" }
                }),
                varRouteUrl = varVssLocationService.routeUrl(varHubRouteContribution, { adminPivot: "preferences" }),
                varMenuItems.push({
                    text: varResources.Preferences,
                    rank: 40,
                    id: "preferencesPageLink",
                    href: varRouteUrl,
                    iconProps: { iconName: "WorldClock", className: "admin-tab-icon" }
                }),
                Feature.isFeatureFlagEnabled(this.context.pageContext, "VisualStudio.Services.AdminEngagement.ProfileSettingsView.EnableRefreshPermissionsTab", false) && (
                    varRouteUrl = varVssLocationService.routeUrl(varHubRouteContribution, { adminPivot: "permissionsRefresh" }),
                    varMenuItems.push({
                        text: varResources.PermissionsRefresh,
                        rank: 45,
                        id: "permissionsRefreshPageLink",
                        href: varRouteUrl,
                        iconProps: { iconName: "Refresh", className: "admin-tab-icon" }
                    })
                ),
                varMenuItems.push({
                    id: "separator",
                    itemType: 1,
                    rank: 50
                }),
                varRouteUrl = varVssLocationService.routeUrl(varHubRouteContribution, { adminPivot: "notifications" }),
                varMenuItems.push({
                    id: "notifications",
                    href: varRouteUrl,
                    rank: 60,
                    text: varResources.Notifications,
                    iconProps: { iconName: "CannedChat", className: "admin-tab-icon" }
                }),
                varMenuItems.push({
                    text: varResources.Theme,
                    rank: 70,
                    id: "changeThemeLink",
                    onActivate: this._showThemePanel,
                    iconProps: { iconName: "Color", className: "admin-tab-icon" }
                }),
                varRouteUrl = varVssLocationService.routeUrl(varHubRouteContribution, { adminPivot: "usage" }),
                varMenuItems.push({
                    id: "usage",
                    href: varRouteUrl,
                    rank: 80,
                    text: varResources.Usage,
                    iconProps: { iconName: "ChartSeries", className: "admin-tab-icon" }
                }),
                varMenuItems.push({
                    id: "separator",
                    itemType: 1,
                    rank: 90
                }),
                varRouteUrl = varVssLocationService.routeUrl(varHubRouteContribution, {
                    adminPivot: "tokens"
                }),
                varMenuItems.push({
                    id: "patPage",
                    href: varRouteUrl,
                    rank: 100,
                    text: varResources.PATPage,
                    iconProps: { iconName: "Signin", className: "admin-tab-icon" }
                }),
                varRouteUrl = varVssLocationService.routeUrl(varHubRouteContribution, {
                    adminPivot: "keys"
                }),
                varMenuItems.push({
                    id: "sshkeyPage",
                    href: varRouteUrl,
                    rank: 110,
                    text: varResources.SSHPublicKeys,
                    iconProps: { iconName: "TwoKeys", className: "admin-tab-icon" }
                }),
                varRouteUrl = varVssLocationService.routeUrl(varHubRouteContribution, {
                    adminPivot: "altcreds"
                }),
                varMenuItems.push({
                    id: "altcredPage",
                    href: varRouteUrl,
                    rank: 120,
                    text: varResources.AlternateCredentials,
                    iconProps: { iconName: "View", className: "admin-tab-icon" }
                }),
                varMenuItems
            }
            _initializeTelemetry() {
                this.telemetryService || (
                    this.telemetryService = this.context.pageContext.getService("IVssTelemetryService")
                )
            }
        }
        Exports.ComponentsHelpUserSettings.UserSettings = varUserSettings,
        Layout.VssComponent.register("ms.vss-tfs-web.user-settings", varUserSettings)
    }(),
    function(e) {
        Exports.ComponentsMarketMarket = {};
        class varMarket extends Layout.VssComponent {
            constructor() {
                super(...arguments),
                this.renderCallout = ((e, varId, varAnchorElement) => React.createElement(
                    Menu.ContextualMenu,
                    {
                        onDismiss: e.collapse,
                        anchorElement: varAnchorElement,
                        anchorOrigin: {
                            horizontal: "end",
                            vertical: "end"
                        },
                        menuProps: {
                            id: varId,
                            items: ContributedMenu.getMenuItems(this.context.pageContext, "ms.vss-tfs-web.market-menu")
                        },
                        menuOrigin: {
                            horizontal: "end",
                            vertical: "start"
                        }
                    }
                ))
            }
            render() {
                return React.createElement(
                    ScreenSize.ScreenSizeConditional,
                    {
                        condition: screenSize => screenSize > 0
                    },
                    React.createElement(
                        Expandable.ExpandableContainer,
                        {
                            ariaLabel: varResources.Marketplace,
                            className: "commandbar-item commandbar-icon cursor-pointer flex-row flex-noshrink justify-center",
                            expandableId: "market-menu",
                            renderCallout: this.renderCallout,
                            role: "menuitem"
                        },
                        React.createElement(
                            Icon.Icon,
                            {
                            iconName: "Shop",
                            size: "medium"
                            }
                        )
                    )
                )
            }
        }
        Exports.ComponentsMarketMarket.Market = varMarket,
        Layout.VssComponent.register("ms.vss-tfs-web.market", varMarket)
    }(),
    function(e) {
        Exports.ComponentsMyWorkMyWork = {};
        class varMyWork extends React.Component {
            constructor() {
                super(...arguments),
                this.renderDropdown = ((e, varId) => React.createElement(
                    Layout.WrappedComponent,
                    {
                        contentClassName: "flyout-my-work",
                        defaultActiveElement: ".bolt-tab",
                        dependencies: ["ms.vss-features.ui-layer-content"],
                        id: varId,
                        modal: false,
                        onDismiss: e.collapse,
                        wrappedType: "customPanel"
                    },
                    React.createElement(
                        Layout.WrappedComponent,
                        {
                            wrappedType: "vertical-header-my-work-flyout"
                        }
                    )
                ))
            }
            render() {
                return React.createElement(
                    ScreenSize.ScreenSizeConditional,
                    {
                        condition: screenSize => screenSize > 0
                    },
                    React.createElement(
                        Expandable.ExpandableContainer,
                        {
                            ariaLabel: varResources.MyWorkLabel,
                            className: "commandbar-item commandbar-icon cursor-pointer flex-row flex-noshrink justify-center",
                            expandableId: "my-work-panel",
                            renderCallout: this.renderDropdown,
                            role: "menuitem"
                        },
                        React.createElement(
                            Icon.Icon, {
                                iconName: "CheckList",
                                size: "medium"
                            }
                        )
                    )
                )
            }
        }
        Exports.ComponentsMyWorkMyWork.MyWork = varMyWork,
        Layout.VssComponent.register("ms.vss-tfs-web.my-work", varMyWork)
    }(),
    function(e) {
        moduleSwitchToDesktopButton = Exports.ComponentsNavigationSwitchToDesktopButton = {};
        Exports.ComponentsNavigationSwitchToDesktopButton.SwitchToDesktopButton = (props => {
            const contrib = props.context.pageContext.getService("IVssContributionService").getContribution("ms.vss-tfs-web.switch-to-desktop");
            return contrib
                ? React.createElement(
                    Layout.WrappedComponent,
                    {
                        dependencies: ["ms.vss-tfs-web.mobile-content"],
                        wrappedProps: {
                            ariaLabel: contrib.ariaLabel,
                            className: Util.css(contrib.className, props.className),
                            iconClassName: Util.css(contrib.iconClassName, props.iconClassName),
                            iconProps: Object.assign(Object.assign({}, contrib.iconProps), { size: "medium" }),
                            text: contrib.text,
                            textClassName: Util.css(contrib.textClassName, props.textClassName)
                        },
                        wrappedType: "ms.vss-tfs-web.switchToDesktopCommand"
                    }
                )
                : null
        })
    }(),
    function(e) {
        moduleUtilNavigation = Exports.UtilNavigation = {};
        Exports.UtilNavigation.useFlyoutNavigation = ((e, t) => 0 === t || t <= 2 && DeviceType.getDeviceType(e).phone)
    }(),
    function(e) {
        moduleSuiteLogo = Exports.ComponentsSuiteLogoSuiteLogo = {};
        class classSuiteLogo extends Layout.VssComponent {
            constructor(e, t) {
                super(e, t),
                e.routeId && UserClaims.userHasClaim(this.context.pageContext, "member") && (
                    this.href = Location.routeUrl(this.context.pageContext, e.routeId)
                );
                const varPageData = t.pageContext.getService("IVssPageService").getData();
                if (this.isHosted = varPageData.isHosted, this.props.alwaysExpanded)
                    this.expanded = 2;
                else {
                    const varNavigationService = t.pageContext.getService("ITfsNavigationService");
                    this.expanded = varNavigationService.getNavigationDisplayMode()
                }
            }
            render() {
                return React.createElement(
                    Screen.ScreenContext.Consumer,
                    null,
                    context => React.createElement(
                        Observer.Observer,
                        {
                            key: "suite-logo",
                            expanded: this.expanded,
                            size: context.size
                        },
                        screenContext => React.createElement(
                            FPSLink.FPSLink,
                            {
                                ariaLabel: this.isHosted ? varResources.SuiteLogoLabel : varResources.SuiteLogoLabelOnPrem,
                                className: "commandbar-item suite-logo flex-row flex-noshrink flex-center",
                                href: this.href,
                                id: "suite-logo",
                                role: "menuitem",
                                telemetrySource: "applicationLink"
                            },
                            React.createElement(
                                Icon.Icon,
                                {
                                    className: "suite-image commandbar-icon justify-center",
                                    iconName: "VSTSLogo"
                                }
                            ),
                            (2 === screenContext.expanded || this.props.alwaysExpanded || screenContext.size <= 0) && React.createElement(
                                "span",
                                {
                                    className: "brand body-m font-weight-heavy"
                                },
                                varResources.BrandName,
                                " ",
                                varResources.ProductName
                            )
                        )
                    )
                )
            }
        }
        Exports.ComponentsSuiteLogoSuiteLogo.SuiteLogo = classSuiteLogo,
        Layout.VssComponent.register("ms.vss-tfs-web.suite-logo", classSuiteLogo)
    }(),
    function(e) {
        moduleProjectNavigation = Exports.ComponentsNavigationProjectNavigation = {};
        class classSideBar extends Layout.VssComponent {
            constructor(e, t) {
                super(e),
                this.navListRef = React.createRef(),
                this.checkAvailableNavigationHeight = (e => !(1 === e && false !== this.props.collapse || this.props.collapse) || window.innerHeight >= this.navigationHeight + this.fixedElementHeight),
                this.onActivateMenuItem = ((e,t) => FPS.onClickFPS(this.context.pageContext, e.href, true, t)),
                this.onExpandedChange = (e => {
                    const t = this.checkAvailableNavigationHeight(e);
                    t !== this.showHubs.value && (
                        this.showHubs.value = t
                    )
                    return true
                });
                this.onKeyDownToggle = (e => {
                    e.defaultPrevented || 32 !== e.which && 13 !== e.which || (
                        this.props.onToggleExpand
                            ? this.props.onToggleExpand()
                            : this.toggleExpansion(),
                        e.preventDefault()
                    )
                });
                this.onFpsLoading = (e => {
                    if (e.detail && e.detail.data && e.detail.data.navigationId) {
                        const navService = this.context.pageContext.getService("IVssNavigationService"),
                        nav = navService.getNavigation(e.detail.data.navigationId);
                        nav && nav.parentId && (
                            this.displayedHubGroupId = nav.parentId,
                            this.displayedHubId = nav.id,
                            this.buildNavigationLists(navService, this.displayedHubGroupCollectionId, this.displayedHubGroupId),
                            this.forceUpdate()
                        )
                    }
                });
                this.onResize = (() => {
                    const navHeight = this.checkAvailableNavigationHeight(this.expanded.value);
                    navHeight !== this.showHubs.value && (this.showHubs.value = navHeight)
                });
                this.onTransitionEnd = (e => {
                    this.navListRef.current === e.target && window.dispatchEvent(new CustomEvent("resize"))
                });
                this.renderMenuCell = ((e, menu, o) => {
                    if (1 === e) {
                        const e = menu.data;
                        return React.createElement(
                            "div",
                            {
                                className: "bolt-menuitem-cell-content bolt-menuitem-cell-icon flex-row"
                            },
                            React.createElement(
                                ContributedIcon.ContributedIcon,
                                {
                                    alt: "",
                                    contributionId: e.id,
                                    icon: e.icon,
                                    iconAsset: e.iconAsset,
                                    iconName: e.iconName || "ViewAll",
                                    iconSize: "medium",
                                    pageContext: this.context.pageContext
                                }
                            )
                        )
                    }
                });
                this.toggleExpansion = (() => {
                    this.context.pageContext.getService("ITfsNavigationService").setNavigationDisplayMode(2 === this.expanded.value ? 1 : 2),
                    this.context.pageContext.getService("IVssTelemetryService").publishEvent("WebPlatform", "VerticalNavigation", {
                        action: "vertical-nav-expanded",
                        displayMode: this.expanded.value,
                        hubsAreVisible: this.showHubs.value
                    })
                });
                this.toggleExpandedHubGroup = ((hubGroup, event, showHubs) => {
                    event.preventDefault();
                    if (this.touchMoveCounter > 5)
                        return;
                    if (showHubs) this.showHubs.value = true;
                    if (this.expandedHubGroup === hubGroup)
                        return this.expandedHubGroup = "",
                    void this.forceUpdate();
                    this.expandedHubGroup = hubGroup;
                    const navService = this.context.pageContext.getService("IVssNavigationService");
                    this.buildNavigationLists(navService, this.displayedHubGroupCollectionId, this.expandedHubGroup),
                    this.forceUpdate()
                });
                this.onTouchStart = (() => {
                    this.touchMoveCounter = 0
                });
                this.onTouchMove = (() => {
                    this.touchMoveCounter++
                });
                const tfsNavSvc = t.pageContext.getService("ITfsNavigationService");
                this.expanded = tfsNavSvc.getNavigationDisplayMode();
                const pageData = t.pageContext.getService("ITfsPageService").getData();
                pageData && pageData.project && (
                    this.projectName = pageData.project.name,
                    this.projectImageUrl = pageData.project.imageUrl,
                    this.settingsUrl = Location.routeUrl(t.pageContext, "ms.vss-admin-web.project-admin-hub-route", { project: this.projectName })
                ),
                this.userIsMember = UserClaims.userHasClaim(t.pageContext, "member");
                const footer = t.pageContext.getService("IVssLayoutManager").getComponentsForRegion("footer");
                this.fixedElementHeight = 144 + (footer && footer.length > 0 ? 22 : 0) + 2 + 8 + (this.userIsMember ? 48 : 0) + (this.settingsUrl ? 48 : 0);
                const vssNavSvc = t.pageContext.getService("IVssNavigationService"),
                displayedNavigation = vssNavSvc.getDisplayedNavigation();
                this.displayedHubGroupCollectionId = displayedNavigation[1],
                this.displayedHubGroupId = displayedNavigation[2],
                this.displayedHubId = displayedNavigation[3],
                this.expandedHubGroup = displayedNavigation[2],
                this.buildNavigationLists(vssNavSvc, this.displayedHubGroupCollectionId, this.displayedHubGroupId);
                let minHeight = 0;
                for (const e of this.hubGroups)
                    minHeight = Math.max(minHeight, e.children.length);
                this.navigationHeight = 48 * this.hubGroups.length + 40 * minHeight,
                this.showHubs = new Observable.ObservableValue(this.checkAvailableNavigationHeight(this.expanded.value))
            }
            render() {
                const { collapse: propsCollapse, isCallout: propsIsCallout, onToggleExpand: propsOnToggleExpand } = this.props;
                return React.createElement(
                    Observer.Observer,
                    {
                        expanded: {
                            filter: this.onExpandedChange,
                            observableValue: this.expanded
                        },
                        showHubs: this.showHubs
                    },
                    observedProps => {
                        let showMoreOrLessState, showMoreOrLess, showMoreOrLessIcon;
                        if (false === propsCollapse || undefined === propsCollapse && 2 === observedProps.expanded) {
                            showMoreOrLess = varResources.ShowLess,
                            showMoreOrLessIcon = "DoubleChevronLeft",
                            showMoreOrLessState = "expanded"
                        } else {
                            showMoreOrLess = varResources.ShowMore,
                            showMoreOrLessIcon = "DoubleChevronRight",
                            showMoreOrLessState = "collapsed"
                        }
                        return React.createElement(
                            FocusZone.FocusZone,
                            {
                                circularNavigation: true,
                                direction: 2,
                                focusGroupProps: {
                                    defaultElementId: "create-action"
                                },
                                focusOnMount: propsIsCallout,
                                handleTabKey: propsIsCallout,
                                postprocessKeyStroke: () => 2
                            },
                            React.createElement(
                                "div",
                                {
                                    className: Util.css("project-navigation region-navigation flex-column flex-grow", showMoreOrLessState),
                                    "data-renderedregion": "navigation",
                                    ref: this.navListRef,
                                    role: "navigation",
                                    onTransitionEnd: this.onTransitionEnd
                                },
                                propsIsCallout && React.createElement(
                                    "div",
                                    {
                                        className: "region-header flex-row flex-noshrink"
                                    },
                                    React.createElement(
                                        moduleSuiteLogo.SuiteLogo,
                                        {
                                            alwaysExpanded: true,
                                            routeId: "ms.vss-tfs-web.suite-me-page-route"
                                        }
                                    )
                                ),
                                React.createElement(
                                    "div",
                                    {
                                        className: "collapsible-section flex-noshrink"
                                    },
                                    React.createElement(
                                        "div",
                                        {
                                            className: "project-item flex-row flex-grow flex-center scroll-hidden"
                                        },
                                        React.createElement(
                                            "span",
                                            {
                                                className: "navigation-icon flex-row flex-center flex-noshrink justify-center"
                                            },
                                            React.createElement(
                                                ProjectPersona.ProjectPersona,
                                                {
                                                    displayName: this.projectName,
                                                    size: "small",
                                                    url: this.projectImageUrl
                                                }
                                            )
                                        ),
                                        React.createElement(
                                            "span",
                                            {
                                                className: "font-weight-heavy expanded-only flex-grow text-ellipsis"
                                            },
                                            this.projectName
                                        )
                                    ),
                                    this.userIsMember && React.createElement(
                                        Expandable.ExpandableContainer,
                                        {
                                            ariaLabel: varResources.Create,
                                            className: "focus-treatment alt-hover-effect flex-row cursor-pointer",
                                            expandableId: "ms.vss-tfs-web.vertical-header-create-menu",
                                            expandKey: 39,
                                            id: "create-action",
                                            renderCallout: (e, id, anchorElement) => React.createElement(
                                                Menu.ContextualMenu,
                                                {
                                                    anchorElement: anchorElement,
                                                    anchorOrigin: {
                                                        horizontal: "end",
                                                        vertical: "start"
                                                    },
                                                    menuProps: {
                                                        id: id,
                                                        items: ContributedMenu.getMenuItems(this.context.pageContext, "ms.vss-tfs-web.vertical-header-create-menu")
                                                    },
                                                    menuOrigin: {
                                                        horizontal: "start",
                                                        vertical: "start"
                                                    },
                                                    onDismiss: e.collapse
                                                }
                                            )
                                        },
                                        React.createElement(
                                            Icon.Icon,
                                            {
                                                className: "navigation-icon flex-row flex-center justify-center",
                                                iconName: "Add",
                                                size: "medium"
                                            }
                                        )
                                    )
                                ),
                                React.createElement(
                                    "div",
                                    {
                                        className: "separator flex-row flex-noshrink"
                                    }
                                ),
                                React.createElement(
                                    "div",
                                    {
                                        className: Util.css("navigation-section flex-column flex-grow scroll-hidden v-scroll-auto custom-scrollbar", (1 === observedProps.expanded && false !== propsCollapse || true === propsCollapse) && "custom-scrollbar-hidden"),
                                        role: "menubar",
                                        tabIndex: -1
                                    },
                                    this.hubGroups.map((e, t) => this.renderNavigation(e, true, e.id === this.expandedHubGroup && observedProps.showHubs, 0 === t))
                                ),
                                React.createElement(
                                    ScreenSize.ScreenSizeConditional,
                                    {
                                        condition: e=>e > 0
                                    },
                                    React.createElement(
                                        "div",
                                        {
                                            className: "separator flex-row flex-noshrink"
                                        }
                                    )
                                ),
                                React.createElement(
                                    moduleSwitchToDesktopButton.SwitchToDesktopButton,
                                    {
                                        className: "flex-row flex-center",
                                        context: this.context,
                                        iconClassName: "navigation-icon flex-row flex-center flex-noshrink justify-center cursor-pointer",
                                        textClassName: "text-ellipsis"
                                    }
                                ),
                                React.createElement(
                                    "div",
                                    {
                                        className: "collapsible-section flex-noshrink"
                                    },
                                    this.userIsMember && React.createElement(
                                        FPSLink.FPSLink,
                                        {
                                            className: Util.css("hub stand-alone navigation-element navigation-link focus-treatment hover-effect flex-row flex-grow flex-center scroll-hidden relative", "ms.vss-admin-web.project-admin-hub" === this.displayedHubId && "displayed"),
                                            href: this.settingsUrl,
                                            id: "settings-link",
                                            telemetrySource: "vertical.settings"
                                        },
                                        React.createElement(
                                            Icon.Icon,
                                            {
                                                ariaLabelledBy: "project-settings-text",
                                                className: "navigation-icon flex-row flex-center justify-center",
                                                iconName: "Settings",
                                                size: "medium"
                                            }
                                        ),
                                        React.createElement(
                                            "span",
                                            {
                                                className: "navigation-text expanded-only text-ellipsis",
                                                id: Util.getSafeId("project-settings-text")
                                            },
                                            varResources.ProjectSettings
                                        )
                                    ),
                                    React.createElement(
                                        ScreenSize.ScreenSizeConditional,
                                        {
                                            condition: e => e > 0
                                        },
                                        React.createElement(
                                            FocusGroup.FocusGroupContext.Consumer,
                                            null,
                                            focusGroupCnxt => React.createElement(
                                                FocusZone.FocusZoneContext.Consumer,
                                                null,
                                                focusZoneCnxt => React.createElement(
                                                    TooltipEx.Tooltip,
                                                    {
                                                        text: showMoreOrLess
                                                    },
                                                    React.createElement(
                                                        "div",
                                                        {
                                                            "aria-label": showMoreOrLess,
                                                            className: "hub stand-alone focus-treatment alt-hover-effect flex-row",
                                                            "data-focuszone": focusZoneCnxt.focuszoneId,
                                                            id: "project-expansion-toggle",
                                                            onClick: propsOnToggleExpand || this.toggleExpansion,
                                                            onFocus: () => { focusGroupCnxt.onFocus("project-expansion-toggle") },
                                                            onKeyDown: this.onKeyDownToggle,
                                                            role: "button",
                                                            tabIndex: Focus.getTabIndex({ id: "project-expansion-toggle" }, focusGroupCnxt)
                                                        },
                                                        React.createElement(
                                                            Icon.Icon,
                                                            {
                                                                className: "navigation-icon flex-row flex-center flex-noshrink justify-center cursor-pointer",
                                                                iconName: showMoreOrLessIcon,
                                                                size: "medium"
                                                            }
                                                        )
                                                    )
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                        )
                    }
                )
            }
            componentDidMount() {
                super.componentDidMount(),
                this.addEventListener(window, "resize", this.onResize),
                this.addEventListener(document.body, "fpsLoading", this.onFpsLoading)
            }
            buildNavigationLists(e, t, n) {
                this.hubGroups = [],
                this.hubs = [];
                let o = e.getNavigation(t);
                if (o && o.children)
                    for (const e of o.children)
                        32 != (32 & (e.flags || 0)) && e.children && e.children.length && this.hubGroups.push(e);
                if ((o = e.getNavigation(n)) && o.children)
                    for (const e of o.children)
                        32 != (32 & (e.flags || 0)) && this.hubs.push(e);
                this.hubGroups = this.sortNavigationList(this.hubGroups),
                this.hubs = this.sortNavigationList(this.hubs)
            }
            getMenuProps(e) {
                const t = [];
                t.push({
                    id: e.id,
                    itemType: 2,
                    text: e.name
                });
                for (let n = 0; n < e.children.length; n++) {
                    const o = e.children[n];
                    t.push({
                        data: o,
                        id: o.id,
                        href: o.href,
                        onActivate: this.onActivateMenuItem,
                        renderMenuCell: this.renderMenuCell,
                        text: o.name
                    })
                }
                return {
                    id: "menu-" + e.id,
                    items: t
                }
            }
            navigationComparer(e, t) {
                return e.order === t.order ? String.localeIgnoreCaseComparer(e.id, t.id) : e.order - t.order
            }
            renderNavigation(props, isHubGroup, o, s) {
                const className = isHubGroup
                    ? Util.css("hub-group", props.id === this.displayedHubGroupId && "displayed")
                    : Util.css("hub", props.id === this.displayedHubId && "displayed");
                let returnElement = React.createElement(
                    "span",
                    {
                        className: "navigation-icon flex-row flex-center flex-noshrink justify-center"
                    },
                    React.createElement(
                        ContributedIcon.ContributedIcon,
                        {
                            alt: "",
                            contributionId: props.id,
                            icon: props.icon,
                            iconAsset: props.iconAsset,
                            iconName: props.iconName || "ViewAll",
                            iconSize: "medium",
                            pageContext: this.context.pageContext
                        }
                    )
                );
                1 !== this.expanded.value && !this.props.collapse || isHubGroup && 1 !== props.children.length || (
                    returnElement = React.createElement(
                        TooltipEx.Tooltip,
                        {
                            text: props.name
                        },
                        returnElement
                    )
                );
                let attachedElement = undefined;
                isHubGroup && props.children.length > 1 && (
                    attachedElement = React.createElement(
                        ScreenSize.ScreenSizeConditional,
                        {
                            condition: e=>e <= 1
                        },
                        React.createElement(
                            Icon.Icon,
                            {
                                className: "touch-chevron justify-center flex-center",
                                iconName: o ? "ChevronUp" : "ChevronDown",
                                onClick: t => this.toggleExpandedHubGroup(props.id, t),
                                size: "small"
                            }
                        )
                    )
                ),
                returnElement = React.createElement(
                    FPSLink.FPSLink,
                    {
                        ariaLabel: props.name,
                        className: Util.css(className, "navigation-element navigation-link focus-treatment flex-row flex-grow flex-center scroll-hidden relative"),
                        href: props.href,
                        id: props.id + "-link",
                        key: props.id,
                        onClick: () => { this.expandedHubGroup = !isHubGroup && props.parentId ? props.parentId : props.id },
                        onTouchEnd: isHubGroup && props.children.length > 1 ? t=>this.toggleExpandedHubGroup(props.id, t, true) : undefined,
                        onTouchMove: this.onTouchMove,
                        onTouchStart: this.onTouchStart,
                        navigationId: isHubGroup ? props.children[0].id : props.id,
                        telemetrySource: "vertical.hub",
                        tabIndex: s ? 0 : undefined
                    },
                    returnElement,
                    React.createElement(
                        "span",
                        {
                            className: "navigation-text expanded-only text-ellipsis flex-grow"
                        },
                        props.name
                    ),
                    attachedElement
                );
                isHubGroup && (
                    props.children.length > 1 && (
                        o && props.id === this.displayedHubGroupId || (
                            returnElement = React.createElement(
                                Expandable.ExpandableContainer,
                                {
                                    className: "flex-row flex-noshrink",
                                    collapseDelay: 90,
                                    expandKey: 39,
                                    excludeFocusZone: true,
                                    excludeTabStop: true,
                                    expandableId: props.id,
                                    expandDelay: 100,
                                    expandOnHover: true,
                                    id: props.id + "-container",
                                    renderCallout: (t, o, anchorElement) => React.createElement(
                                        Menu.ContextualMenu,
                                        {
                                            anchorElement: anchorElement,
                                            anchorOrigin: {
                                                horizontal: "end",
                                                vertical: "start"
                                            },
                                            menuProps: this.getMenuProps(props),
                                            menuOrigin: {
                                                horizontal: "start",
                                                vertical: "start"
                                            },
                                            onDismiss: t.collapse
                                        }
                                    ),
                                    role: "menuitem"
                                },
                                returnElement
                            )
                        ),
                        o && (
                            returnElement = React.createElement(
                                React.Fragment,
                                null,
                                returnElement,
                                this.hubs.map(e => this.renderNavigation(e, false, false))
                            )
                        )
                    ),
                    returnElement = React.createElement(
                        "div",
                        {
                            key: props.id,
                            className: Util.css("hub-group-container flex-column flex-noshrink relative", props.id === this.expandedHubGroup && "expanded-container", props.id === this.displayedHubGroupId && "displayed-container", (!o || props.children.length <= 1) && "hub-group-only")
                        },
                        returnElement
                    )
                );
                return returnElement
            }
            sortNavigationList(navList) {
                const external = [], builtin = [];
                for (const o of navList)
                    if (Navigation.isNavigationItemBuiltinOrTrusted(o)) {
                        builtin.push(o)
                    } else {
                        if (0 === o.order) o.order = 100;
                        external.push(o);
                    }
                builtin.sort(this.navigationComparer);
                external.sort(this.navigationComparer);
                return [...builtin, ...external];
            }
        }
        class classProjectNavigationCallout extends Layout.VssComponent {
            constructor(e, t) {
                super(e),
                this.collapseCallout = (() => {
                    this.isCollapsing.value = true
                }),
                this.onAnimationEnd = (() => {
                    this.isCollapsing.value && this.props.closeCallout()
                }),
                this.isCollapsing = new Observable.ObservableValue(false);
                const footer = t.pageContext.getService("IVssLayoutManager").getComponentsForRegion("footer");
                this.pageHasFooter = footer && footer.length > 0
            }
            render() {
                return React.createElement(
                    Observer.Observer,
                    {
                        isCollapsing: this.isCollapsing
                    },
                    collapsingProps => React.createElement(
                        Callout.Callout,
                        {
                            anchorElement: document.body,
                            anchorPoint: {
                                x: 0,
                                y: 0
                            },
                            calloutOrigin: {
                                horizontal: "start",
                                vertical: "start"
                            },
                            className: Util.css("navigation-callout scroll-hidden", this.pageHasFooter && "pageHasFooter"),
                            contentClassName: "flex-column",
                            lightDismiss: true,
                            modal: true,
                            onDismiss: this.collapseCallout
                        },
                        React.createElement(
                            "div",
                            {
                                className: Util.css("nav-animation-container flex-row flex-grow scroll-hidden", collapsingProps.isCollapsing && "collapsing"),
                                onAnimationEnd: this.onAnimationEnd
                            },
                            React.createElement(
                                classSideBar,
                                {
                                    isCallout: true,
                                    onToggleExpand: this.collapseCallout,
                                    collapse: this.props.collapse
                                }
                            )
                        )
                    )
                )
            }
        }
        Exports.ComponentsNavigationProjectNavigation.ProjectNavigationCallout = classProjectNavigationCallout;
        Layout.VssComponent.register("ms.vss-tfs-web.frame.project-navigation", propsProjectNavigation => {
            const observable = new Observable.ObservableValue(false),
            screenContext = React.useContext(Screen.ScreenContext),
            pageContext = Layout.useComponentContext().pageContext,
            closeCallout = () => {
                observable.value = !observable.value
            };
            return React.createElement(
                Observer.Observer,
                {
                    showPanel: observable,
                    size: screenContext.size
                },
                e => !moduleUtilNavigation.useFlyoutNavigation(pageContext, e.size) &&
                    React.createElement(
                        "div",
                        {
                            className: "navigation-container flex-column"
                        },
                        e.showPanel
                            ? React.createElement(
                                React.Fragment,
                                null,
                                React.createElement(
                                    "div",
                                    {
                                        className: "project-navigation region-navigation placeholder flex-column flex-grow flex-noshrink",
                                        role: "presentation"
                                    }
                                ),
                                React.createElement(
                                    classProjectNavigationCallout,
                                    {
                                        collapse: false,
                                        closeCallout: closeCallout
                                    }
                                )
                            )
                            : React.createElement(
                                classSideBar,
                                {
                                    onToggleExpand: e.size < 2 ? closeCallout : undefined,
                                    collapse: e.size < 2 || undefined
                                }
                            )
                    )
            )
        }
        )
    }(),
    function(e) {
        Exports.ComponentsNavigationNavigationHeaderButton = {};
        Layout.VssComponent.register("ms.vss-tfs-web.frame.navigation-header-button", () => {
            const pageContext = Layout.useComponentContext().pageContext;
            return React.createElement(
                ScreenSize.ScreenSizeConditional,
                {
                    condition: t => moduleUtilNavigation.useFlyoutNavigation(pageContext, t)
                },
                React.createElement(
                    Expandable.ExpandableContainer,
                    {
                        className: "navigation-header-button commandbar-item commandbar-icon flex-noshrink justify-center cursor-pointer",
                        renderCallout: e => React.createElement(
                            moduleProjectNavigation.ProjectNavigationCallout,
                            {
                                collapse: false,
                                closeCallout: e.collapse
                            }
                        ),
                        tabIndex: 0,
                        expandKey: [13, 32],
                        ariaLabel: varResources.NavigationMenu
                    },
                    React.createElement(
                        Icon.Icon,
                        {
                            iconName: "GlobalNavButton",
                            size: "medium"
                        }
                    )
                )
            )
        })
    }(),
    function(e) {
        Exports.ComponentsNavigationTopLevelNavigation = {};
        const r = "VisualStudio.Services.AdminEngagement.OrganizationNavigation.AccountMappingWhenOrgDiscrepancy";
        class classTopLevelNavigation extends Layout.VssComponent {
            constructor(e, t) {
                super(e, t),
                this.showMoreLink = true,
                this.renderListItem = (listEntry => {
                    const entryId = "host-" + listEntry.id;
                    return React.createElement(
                        Link.Link,
                        {
                            ariaSelected: listEntry.id === this.state.displayedHostId,
                            className: Util.css("host-link navigation-link top-navigation-item focus-treatment flex-row flex-center flex-noshrink relative", listEntry.id === this.state.displayedHostId && "displayed"),
                            href: listEntry.url,
                            id: entryId,
                            key: entryId,
                            role: "option"
                        },
                        React.createElement(
                            ProjectPersona.ProjectPersona,
                            {
                                displayName: listEntry.name,
                                size: "small"
                            }
                        ),
                        React.createElement(
                            "span",
                            {
                                className: "text-ellipsis"
                            },
                            listEntry.name
                        )
                    )
                }),
                this.updateCollectionList = (newEntries => {
                    const location = Location.getServiceLocation(this.context.pageContext, undefined, 1),
                    sortedEntries = newEntries.map((entry, n) => ({
                        id: entry.id,
                        name: entry.name,
                        url: Url.combineUrlPaths(location, encodeURIComponent(entry.name))
                    }));
                    sortedEntries.sort((left, right) =>
                        left.id === this.state.displayedHostId
                            ? -1
                            : right.id === this.state.displayedHostId
                            ? 1
                            : String.localeIgnoreCaseComparer(left.name, right.name)),
                    this.state.collections.push(...sortedEntries)
                }),
                this.updateNewOrgUrl = (orgUrl => {
                    if (orgUrl) {
                        const uri = new Url.Uri(orgUrl);
                        uri.addQueryParam("campaign", "o~msft~vsts~orghome", true),
                        this.state.newOrgLink.value = uri.absoluteUri
                    }
                }),
                this.showAllHostsClicked = (() => {
                    this.showMoreLink = false,
                    this.updateOrganizationList()
                }),
                this.updateOrganizationList = (() => {
                    let allOrgs = this.allOrganizations;
                    if (this.mruOrganizations) {
                        const processedOrgs = [];
                        let hasAny = false;
                        allOrgs = [];
                        for (const org of [...this.mruOrganizations, ...this.allOrganizations]) {
                            processedOrgs.push(org.id),
                            org.id === this.state.displayedHostId ? (
                                allOrgs.unshift(org),
                                hasAny = true
                            ) : (
                                allOrgs.push(org)
                            )
                            if (processedOrgs.indexOf(org.id) < 0 && (hasAny && this.showMoreLink && allOrgs.length >= 4))
                                break
                        }
                    }
                    const showSome = this.showMoreLink && allOrgs.length > 4 ? allOrgs.slice(0, 4) : allOrgs;
                    this.state.organizations.splice(0, this.state.organizations.length, ...showSome)
                }
                );
                const pageData = t.pageContext.getService("IVssPageService").getData();
                let accessLevelsLink;
                if (!pageData.isHosted) {
                    if (t.pageContext.getService("IVssSecurityService").hasPermission("1f4179b3-6bac-4d01-b421-71ea09171400", "FrameworkGlobalSecurity", 2)) {
                        const location = Location.getServiceLocation(t.pageContext, undefined, 1);
                        accessLevelsLink = Location.routeUrl(t.pageContext, "ms.vss-admin-web.admin-access-levels-route", {}, location)
                    }
                }
                this.state = {
                    accessLevelsLink: accessLevelsLink,
                    collections: new Observable.ObservableArray([]),
                    displayedHostId: pageData.hostId,
                    isHosted: pageData.isHosted,
                    newOrgLink: new Observable.ObservableValue(undefined),
                    organizations: new Observable.ObservableArray([]),
                    settingsLink: Location.routeUrl(t.pageContext, "ms.vss-admin-web.collection-admin-hub-route")
                }
                if (this.state.isHosted) {
                    this.trackPromise(Promise.all([
                        OrganizationsService.getMostRecentlyAccessedUserOrganizations(t.pageContext),
                        OrganizationsService.getUserOrganizations(t.pageContext)
                    ])).promise.then(e => {
                        this.mruOrganizations = e[0],
                        this.allOrganizations = e[1],
                        this.updateOrganizationList()
                    });
                    this.trackPromise(OrganizationsService.getNewOrganizationUrl(t.pageContext)).promise.then(this.updateNewOrgUrl);
                }
                else {
                    const coreRestClient = t.pageContext.getRestClient("ICoreRestClient", { hostType: 1 });
                    this.trackPromise(coreRestClient.getProjectCollections(1e3)).promise.then(this.updateCollectionList)
                }
            }
            componentDidMount() {
                this._queueSyncUserAccountMapping()
            }
            render() {
                return React.createElement(
                    ScreenSize.ScreenSizeConditional,
                    {
                        condition: e => this.props.showAlways || !moduleUtilNavigation.useFlyoutNavigation(this.context.pageContext, e)
                    },
                    React.createElement(
                        "div",
                        {
                            className: Util.css(this.props.className, "top-level-navigation region-navigation flex-column flex-noshrink scroll-hidden expanded"),
                            role: "navigation"
                        },
                        React.createElement(
                            "div",
                            {
                                className: "top-level-section scroll-hidden flex-column flex-grow"
                            },
                            React.createElement(
                                Observer.Observer,
                                {
                                    hosts: this.state.isHosted ? this.state.organizations : this.state.collections
                                },
                                e => e.hosts.length ? React.createElement(
                                    FocusZone.FocusZone,
                                    {
                                        direction: 2,
                                        focusGroupProps: {
                                            defaultElementId: "host-" + e.hosts[0].id
                                        }
                                    },
                                    React.createElement(
                                        "div",
                                        {
                                            className: "flex-column v-scroll-auto h-scroll-hidden custom-scrollbar",
                                            role: "listbox",
                                            "aria-label": varResources.MyOrgs
                                        },
                                        e.hosts.map(this.renderListItem)
                                    ),
                                    this.state.isHosted && React.createElement(
                                        "div",
                                        {
                                            className: "action-section flex-column flex-noshrink"
                                        },
                                        this.allOrganizations && this.allOrganizations.length - e.hosts.length > 0 ? React.createElement(
                                            Link.Link,
                                            {
                                                className: "action-link top-navigation-item focus-treatment flex-row flex-noshrink",
                                                onClick: this.showAllHostsClicked
                                            },
                                            this.allOrganizations.length - e.hosts.length == 1
                                                ? varResources.OneMoreOrganization
                                                : String.format(varResources.MoreOrganizations, this.allOrganizations.length - e.hosts.length)
                                        ) : null,
                                        React.createElement(
                                            Observer.Observer,
                                            {
                                                newOrgUrl: this.state.newOrgLink
                                            },
                                            e => e.newOrgUrl ? React.createElement(
                                                Link.Link,
                                                {
                                                    className: "action-link top-navigation-item focus-treatment flex-row flex-noshrink",
                                                    href: e.newOrgUrl,
                                                    id: "new-org-link"
                                                },
                                                varResources.NewOrg
                                            ) : null
                                        )
                                    )
                                ) : null
                            )
                        ),
                        React.createElement(
                            "div",
                            {
                                className: "announcements-section flex-column flex-noshrink"
                            },
                            React.createElement(
                                Layout.WrappedComponent,
                                {
                                    wrappedType: "globalAnnouncement",
                                    dependencies: ["ms.vss-tfs-web.suite-me-page-content"]
                                }
                            )
                        ),
                        this.state.isHosted ? null : React.createElement(
                            "div",
                            {
                                className: "related-pages-section flex-column flex-noshrink"
                            },
                            React.createElement(
                                "span",
                                {
                                    className: "section-header"
                                },
                                varResources.RelatedPages
                            ),
                            this.state.isHosted && React.createElement(
                                "span",
                                {
                                    className: "related-link"
                                },
                                React.createElement(
                                    Link.Link,
                                    {
                                        className: "link-text",
                                        href: "https://docs.microsoft.com/en-us/azure/devops/release-notes/"
                                    },
                                    varResources.WhatsNew
                                )
                            ),
                            React.createElement(
                                "span",
                                {
                                    className: "related-link"
                                },
                                React.createElement(
                                    Link.Link,
                                    {
                                        className: "link-text",
                                        href: "https://docs.microsoft.com/en-us/azure/devops/?view=azdevops"
                                    },
                                    varResources.Documentation
                                )
                            ),
                            React.createElement(
                                "span",
                                {
                                    className: "related-link"
                                },
                                React.createElement(
                                    Link.Link,
                                    {
                                        className: "link-text",
                                        href: "https://azure.microsoft.com/en-us/support/devops/"
                                    },
                                    varResources.GetHelp
                                )
                            ),
                            this.state.accessLevelsLink && React.createElement(
                                "span",
                                {
                                    className: "related-link"
                                },
                                React.createElement(
                                    Link.Link,
                                    {
                                        className: "link-text",
                                        href: this.state.accessLevelsLink
                                    },
                                    varResources.AccessLevels
                                )
                            )
                        ),
                        React.createElement(
                            "div",
                            {
                                className: "navigation-footer"
                            },
                            React.createElement(
                                FPSLink.FPSLink,
                                {
                                    className: "action-link navigation-link focus-treatment top-navigation-item flex-row",
                                    href: this.state.settingsLink,
                                    id: "settings-link"
                                },
                                React.createElement(
                                    Icon.Icon,
                                    {
                                        className: "icon-margin",
                                        iconName: "Settings",
                                        size: "medium"
                                    }
                                ),
                                React.createElement(
                                    "span",
                                    {
                                        className: "text-ellipsis"
                                    },
                                    this.state.isHosted ? varResources.OrgSettings : varResources.CollectionSettings
                                )
                            ),
                            React.createElement(
                                moduleSwitchToDesktopButton.SwitchToDesktopButton,
                                {
                                    className: "action-link top-navigation-item",
                                    context: this.context,
                                    iconClassName: "icon-margin",
                                    textClassName: "text-ellipsis"
                                }
                            )
                        )
                    )
                )
            }
            async _queueSyncUserAccountMapping() {
                if (await OrganizationsService.isUserAccountMappingRequired(this.context.pageContext) &&
                    (
                        await AccountMappingService.queueSyncUserAccountMapping(this.context.pageContext),
                        Feature.isFeatureFlagEnabled(this.context.pageContext, r, false)
                    )
                ) {
                    const pageService = await this.context.pageContext.getService("IVssPageService"),
                    pageData = await pageService.getData();
                    if (pageData) {
                        await AccountMappingService.activateMapping(this.context.pageContext, pageData.user.descriptor, pageData.hostId)
                    }
                }
            }
        }
        Layout.Components.add("ms.vss-tfs-web.frame.top-level-navigation", classTopLevelNavigation);
        Layout.VssComponent.register("ms.vss-tfs-web.frame.top-navigation-header-button", () => {
            const pageContext = Layout.useComponentContext().pageContext;
            return React.createElement(
                ScreenSize.ScreenSizeConditional,
                {
                    condition: screenSize => moduleUtilNavigation.useFlyoutNavigation(pageContext, screenSize)
                },
                React.createElement(
                    Expandable.ExpandableContainer,
                    {
                        className: "navigation-header-button commandbar-item commandbar-icon flex-noshrink justify-center cursor-pointer",
                        renderCallout: e => React.createElement(
                            Callout.Callout,
                            {
                                className: "absolute-fill",
                                contentClassName: "flex-column",
                                lightDismiss: true,
                                modal: true,
                                onDismiss: e.collapse
                            },
                            React.createElement(
                                "div",
                                {
                                    className: "region-header flex-row flex-noshrink"
                                },
                                React.createElement(
                                    moduleSuiteLogo.SuiteLogo,
                                    {
                                        alwaysExpanded: true
                                    }
                                )
                            ),
                            React.createElement(
                                classTopLevelNavigation,
                                {
                                    className: "flex-grow",
                                    showAlways: true
                                }
                            )
                        ),
                        tabIndex: 0,
                        expandKey: [13, 32],
                        ariaLabel: varResources.NavigationMenu
                    },
                    React.createElement(
                        Icon.Icon,
                        {
                            iconName: "GlobalNavButton",
                            size: "medium"
                        }
                    )
                )
            )
        })
    }(),
    function(e) {
        Exports.ComponentsProfileServiceMeControlService = {};
        Context.Services.add("IMeControlService", {
            serviceFactory: class extends Context.VssService {
                constructor() {
                    super(...arguments),
                    this._showChangeTenants = (() => {
                        this._initializeTelemetry(),
                        this.telemetryService.publishEvent("MeControl", "TenantPicker", { Action: "Show Tenant Picker" }),
                        this.pageContext.getService("IVssContributionService").executeCommandEx("change-tenants", {
                            methodName: "show",
                            serviceName: "ITenantPickerPanel",
                            dependencies: ["ms.vss-tfs-web.tenant-picker-content"]
                        })
                    }),
                    this._showUserSettings = (() => {
                        this._initializeTelemetry(),
                        this.telemetryService.publishEvent("MeControl", "UserSettings", { Action: "Show User Settings" }),
                        this.pageContext.getService("IVssContributionService").executeCommandEx("show-user-settings-header-menu", {
                            methodName: "expandUserSettingsMenu",
                            serviceName: "IUserSettingsMenu",
                            dependencies: []
                        })
                    }),
                    this._showHelp = (() => {
                        this._initializeTelemetry(),
                        this.telemetryService.publishEvent("MeControl", "HelpMenu", { Action: "Show Help Menu" }),
                        this.pageContext.getService("IVssContributionService").executeCommandEx("show-help-header-menu", {
                            methodName: "expandHelpMenu",
                            serviceName: "IUserSettingsMenu",
                            dependencies: []
                        })
                    })
                }
                getConfigurations(context, profilePictureUrl) {
                    const currentTheme = this.pageContext.getService("IVssThemeService").getCurrentTheme();
                    return {
                        apiGeneration: "GEN2",
                        containerId: "me-control-container",
                        currentAccount: context.currentAccount.isAnonymous ? undefined : {
                            type: true === context.currentAccount.isMsaOrFpmsa ? "msaFed" : "aad",
                            memberName: context.currentAccount.email,
                            displayName: context.currentAccount.name,
                            orgName: context.currentAccount.aadTenantDisplayName,
                            pictureUrl: profilePictureUrl,
                            authenticatedState: "signedIn",
                            profile: {
                                profileName: context.currentAccount.name,
                                profilePictureUrl: profilePictureUrl,
                                editProfilePictureUrl: ""
                            }
                        },
                        authProviderConfig: {
                            type: "webAadWithMsaFed",
                            appSignInUrl: context.authProviderConfig.signInUrl,
                            appSignInToUrl: context.authProviderConfig.signInToUrl,
                            appSignOutUrl: context.currentAccount.isAnonymous ? "" : context.authProviderConfig.signOutUrl,
                            appSwitchUrl: context.currentAccount.isAnonymous ? "" : context.authProviderConfig.switchUrl,
                            appSwitchToUrl: context.currentAccount.isAnonymous ? "" : context.authProviderConfig.switchToUrl,
                            aad: {
                                signOutUrl: context.currentAccount.isAnonymous ? "" : context.aadIdpConfig.aadIdpSignOutUrl,
                                signOutAndForgetUrl: context.currentAccount.isAnonymous ? "" : context.aadIdpConfig.aadIdpSignOutAndForgetUrl,
                                forgetUrl: context.currentAccount.isAnonymous ? "" : context.aadIdpConfig.aadIdpForgetUrl,
                                rememberedAccountsUrl: context.aadIdpConfig.aadIdpRememberedAccountsUrl
                            }
                        },
                        primaryUXConfig: context.currentAccount.isAnonymous ? "" : {
                            displayModes: [{
                                type: "compressed",
                                widthBreakpoint: 5e3
                            }],
                            theme: {
                                type: currentTheme.isDark ? "dark" : "light"
                            }
                        },
                        appContextConfig: context.currentAccount.isAnonymous ? "" : {
                            commands: this.getCommands(context)
                        }
                    }
                }
                getCommands(e) {
                    const commands = [];
                    return Feature.isFeatureFlagEnabled(this.pageContext, "VisualStudio.Services.AdminEngagement.MeControl.MeControlTenantPicker", false) || (
                        commands.push({
                            text: varResources.AzureDevOpsProfile,
                            id: "userSettingsLink",
                            ariaLabel: varResources.AzureDevOpsProfile,
                            openInNewTab: true,
                            url: e.profileUrl,
                            type: "link"
                        })
                    ),
                    Feature.isFeatureFlagEnabled(this.pageContext, "VisualStudio.Services.AdminEngagement.MeControl.MeControlTenantPicker", false) && (
                        commands.push({
                            text: varResources.TenantPicker,
                            id: "tenantPickerLink",
                            ariaLabel: varResources.TenantPicker,
                            openInNewTab: false,
                            type: "link",
                            onClick: this._showChangeTenants
                        })
                    ),
                    commands.push({
                        text: varResources.Help,
                        id: "showHelp",
                        ariaLabel: varResources.Help,
                        openInNewTab: false,
                        type: "link",
                        onClick: this._showHelp
                    }),
                    commands.push({
                        text: varResources.UserSettings,
                        id: "showUserSettings",
                        ariaLabel: varResources.UserSettings,
                        openInNewTab: false,
                        type: "link",
                        onClick: this._showUserSettings
                    }),
                    commands
                }
                _initializeTelemetry() {
                    this.telemetryService || (
                        this.telemetryService = this.pageContext.getService("IVssTelemetryService")
                    )
                }
            }
        })
    }(),
    _ = Exports[nameofComponentsProfileUtilMeControlConstants = "ComponentsProfileUtilMeControlConstants"] = {},
    (varMeControlConstants = Exports[nameofComponentsProfileUtilMeControlConstants].MeControlConstants || (Exports[nameofComponentsProfileUtilMeControlConstants].MeControlConstants = {})).LoadScriptScenario = "LoadMeControlScriptScenario",
    varMeControlConstants.Area = "MeControl",
    varMeControlConstants.LoadScriptFeature = "LoadMeControlScript",
    varMeControlConstants.LoadScriptFailAction = "Load me control script failure",
    varMeControlConstants.LoadComponentFeature = "LoadMeControlComponent",
    varMeControlConstants.LoadComponentFailAction = "Load me control component failure",
    function(e) {
        Exports.ComponentsProfileMeControl = {};
        const dataProviderContrib = "ms.vss-tfs-web.vertical-header-me-control-data-provider";
        class classMeControl extends Layout.VssComponent {
            constructor(e, t) {
                super(e, t),
                this._onSelectedThemeChanged = (e => {
                    const windowMeControl = window.MeControl;
                    windowMeControl && windowMeControl.API && windowMeControl.API.setTheme({
                        type: e.isDark ? "dark" : "light"
                    })
                }),
                this._onLoadMeControlScript = (() => {
                    const contentService = this.context.pageContext.getService("IVssContentService"),
                    performanceService = this.context.pageContext.getService("IVssPerformanceService"),
                    telemetryService = this.context.pageContext.getService("IVssTelemetryService");
                    if (this.state.data.meControlScriptUrl) {
                        const scriptToLoad = {
                            url: this.state.data.meControlScriptUrl,
                            contentLength: 16e3,
                            clientId: "me-control-script",
                            contributionId: "vertical-header-profile",
                            contentType: "text/javascript"
                        };
                        performanceService.startScenario(_.MeControlConstants.LoadScriptScenario, false),
                        contentService.loadScripts([scriptToLoad]).then(
                            e => {
                                performanceService.endScenario(_.MeControlConstants.Area, _.MeControlConstants.LoadScriptScenario, false),
                                this._loadMeControlComponent(telemetryService)
                            },
                            e => {
                                performanceService.endScenario(_.MeControlConstants.Area, _.MeControlConstants.LoadScriptScenario, false, undefined, { status: "failed" }),
                                telemetryService.publishEvent(_.MeControlConstants.Area, _.MeControlConstants.LoadScriptFeature, {
                                    Action: _.MeControlConstants.LoadScriptFailAction,
                                    ErrorMessage: JSON.stringify(e)
                                })
                            }
                        )
                    }
                }
                ),
                this._loadMeControlComponent = (e => {
                    window.MeControl.Loader.load(this.state.configDetails) ? (
                        this.themeService.subscribe(this._onSelectedThemeChanged, "themeChanged")
                    ) : (
                        e.publishEvent(_.MeControlConstants.Area, _.MeControlConstants.LoadComponentFeature, {
                            Action: _.MeControlConstants.LoadComponentFailAction
                        })
                    )
                });
                const pageData = t.pageContext.getService("IVssPageService").getData(),
                contribData = this.context.pageContext.getService("IVssContributionService").getData(dataProviderContrib);
                let identityImageUrl = "";
                pageData && pageData.user && (
                    identityImageUrl = Identity.getIdentityImageUrl(t.pageContext, pageData.user, 2) + "&" + (new Date).getTime()
                ),
                this.themeService = this.context.pageContext.getService("IVssThemeService");
                const meControlService = this.context.pageContext.getService("IMeControlService");
                this.state = {
                    data: contribData,
                    configDetails: meControlService.getConfigurations(contribData, identityImageUrl)
                }
            }
            render() {
                return React.createElement(
                    "div",
                    {
                        className: "me-control-div commandbar-item commandbar-icon flex-row flex-noshrink " + (this.state.data && this.state.data.currentAccount.isAnonymous ? "sign-in" : "")
                    },
                    React.createElement(
                        "div",
                        {
                            id: "me-control-container"
                        }
                    )
                )
            }
            componentDidMount() {
                super.componentDidMount(),
                this.state.data && (
                    this._loadMeControlScriptAfterTTI()
                )
            }
            componentWillUnmount() {
                super.componentWillUnmount(),
                this.context.pageContext.getService("IVssContributionEventService").unsubscribe(this._onLoadMeControlScript, "page-rendered"),
                this.themeService.unsubscribe(this._onSelectedThemeChanged, "themeChanged")
            }
            _loadMeControlScriptAfterTTI() {
                if (window.MeControl) {
                    const telemetryService = this.context.pageContext.getService("IVssTelemetryService");
                    this._loadMeControlComponent(telemetryService)
                } else {
                    this.context.pageContext.getService("IVssContributionEventService").subscribe(this._onLoadMeControlScript, "page-rendered")
                }
            }
        }
        Exports.ComponentsProfileMeControl.MeControl = classMeControl,
        Layout.VssComponent.register("ms.vss-tfs-web.me-control", classMeControl)
    }(),
    function(e) {
        Exports.ComponentsProfileProfile = {};
        class classProfile extends Layout.VssComponent {
            constructor(e, t) {
                super(e, t),
                this.renderDropdown = ((e, id, anchorElement) => React.createElement(
                    Menu.ContextualMenu,
                    {
                        onDismiss: e.collapse,
                        anchorElement: anchorElement,
                        anchorOrigin: {
                            horizontal: "end",
                            vertical: "end"
                        },
                        menuProps: {
                            id: id,
                            items: ContributedMenu.getMenuItems(this.context.pageContext, "ms.vss-tfs-web.profile-menu")
                        },
                        menuOrigin: {
                            horizontal: "end",
                            vertical: "start"
                        }
                    }
                ));
                const pageData = t.pageContext.getService("IVssPageService").getData();
                pageData && pageData.user && (
                    this.displayName = pageData.user.displayName,
                    this.imageUrl = Identity.getIdentityImageUrl(t.pageContext, pageData.user, 1)
                )
            }
            render() {
                return React.createElement(
                    Expandable.ExpandableContainer,
                    {
                        className: "navigation-profile-menu commandbar-item commandbar-icon cursor-pointer flex-row flex-noshrink justify-center",
                        expandableId: "profile-menu",
                        role: "menuitem",
                        renderCallout: this.renderDropdown
                    },
                    React.createElement(
                        VssPersona.VssPersona,
                        {
                            imgAltText: varResources.ManageUserSettings,
                            size: "small",
                            suppressPersonaCard: true,
                            identityDetailsProvider: {
                                getIdentityImageUrl: e => this.imageUrl,
                                getDisplayName: () => this.displayName || ""
                            }
                        }
                    )
                )
            }
        }
        Exports.ComponentsProfileProfile.Profile = classProfile,
        Layout.VssComponent.register("ms.vss-tfs-web.profile", classProfile)
    }(),
    function(e) {
        Exports.ComponentsSignInSignIn = {};
        class classSignInLink extends Layout.VssComponent {
            constructor(e, t) {
                super(e, t);
                const headerActionData = HeaderActions.getHeaderActionData(t.pageContext) || {};
                this.state = {
                    signInUrl: headerActionData.signInUrl
                }
            }
            render() {
                return React.createElement(
                    Link.Link,
                    {
                        className: "sign-in-link commandbar-item",
                        href: this.state.signInUrl
                    },
                    varResources.SignIn
                )
            }
        }
        Exports.ComponentsSignInSignIn.SignInLink = classSignInLink,
        Layout.VssComponent.register("ms.vss-tfs-web.sign-in-link", classSignInLink)
    }(),
    function(e) {
        Exports.ComponentsUserMenuItemUserMenuItem = {};
        Layout.Components.add("userMenuItem", class extends Layout.VssComponent {
            constructor(e, t) {
                super(e, t);
                const pageData = t.pageContext.getService("IVssPageService").getData();
                pageData && pageData.user && (
                    this.userDisplayName = pageData.user.displayName,
                    this.userUniqueName = pageData.user.uniqueName,
                    this.userImageUrl = Identity.getIdentityImageUrl(t.pageContext, pageData.user, 1)
                )
            }
            render() {
                return React.createElement(
                    "tr",
                    {
                        "aria-posinset": this.props.details.position,
                        "aria-setsize": this.props.details.setSize,
                        className: "bolt-menuitem-row bolt-list-row user-menuitem-row",
                        role: "presentation"
                    },
                    React.createElement(
                        "td",
                        {
                            className: "bolt-menuitem-cell bolt-list-cell"
                        }
                    ),
                    React.createElement(
                        "td",
                        {
                            className: "bolt-menuitem-cell bolt-list-cell",
                            colSpan: 5
                        },
                        React.createElement(
                            "div",
                            {
                                className: "flex-row flex-center"
                            },
                            React.createElement(
                                "img",
                                {
                                    className: "user-menu-item-image",
                                    src: this.userImageUrl,
                                    alt: ""
                                }
                            ), 
                            React.createElement(
                                "div",
                                {
                                    className: "user-menu-item-details"
                                },
                                React.createElement(
                                    "div",
                                    null,
                                    this.userDisplayName
                                ),
                                React.createElement(
                                    "div",
                                    {
                                        className: "user-menu-item-unique-name"
                                    },
                                    this.userUniqueName
                                )
                            )
                        )
                    ),
                    React.createElement(
                        "td",
                        {
                            className: "bolt-menuitem-cell bolt-list-cell"
                        }
                    )
                )
            }
        })
    }()
}, [
    "Resources",
    "Components/Composite/Composite",
    "Components/Header/WithHeaderProgressBar",
    "Components/Header/ProjectHeader",
    "Components/Header/TopLevelHeader",
    "Components/Help/UserSettingsService",
    "Components/Help/Help",
    "Components/Help/UserSettings",
    "Components/Market/Market",
    "Components/MyWork/MyWork",
    "Components/Navigation/SwitchToDesktopButton",
    "Util/Navigation",
    "Components/SuiteLogo/SuiteLogo",
    "Components/Navigation/ProjectNavigation",
    "Components/Navigation/NavigationHeaderButton",
    "Components/Navigation/TopLevelNavigation",
    "Components/Profile/Service/MeControlService",
    "Components/Profile/Util/MeControlConstants",
    "Components/Profile/MeControl",
    "Components/Profile/Profile",
    "Components/SignIn/SignIn",
    "Components/UserMenuItem/UserMenuItem"
]),
document.dispatchEvent(new CustomEvent("scriptLoaded",{
    cancelable: false,
    detail: {
        id: "ms.vss-tfs-web.frame-content"
    }
}));
